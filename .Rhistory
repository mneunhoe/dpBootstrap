data <- full_data
# Take a sample from the data
data$df <- data$df[sample(nrow(data$df), size = 2000), ]
# Define a draw from a Laplace distribution
rlaplace <- function(n, b) {
rexp(n, 1 / b) - rexp(n, 1 / b)
}
statistics_of_interest(full_data)
mechanism <- function(data) {
rdomain <- colnames(data$df)
domain <- data$domain
total <- dim(data$df)[1]
cliques = list(
list('age', 'education-num'),
list('marital-status', 'race'),
list('sex', 'hours-per-week'),
list('hours-per-week', 'income>50K'),
list('education-num', 'income>50K'),
list('native-country', 'marital-status', 'occupation')
)
epsilon = 1.0
epsilon_split = epsilon / (length(domain) + length(cliques))
sigma = 2.0 / epsilon_split
measurements <- list()
counter <- 1
for (col in rdomain) {
x <- data$project(col)$datavector()
y = x + rlaplace(n = length(x), b = sigma)
I = Matrix::Diagonal(length(x))
measurements[[counter]] <- list(I, y, sigma, list(col))
counter <- counter + 1
}
cl <- cliques[[1]]
for (cl in cliques) {
x = data$project(cl)$datavector()
y = x + rlaplace(n = length(x), b = sigma)
I = Matrix::Diagonal(length(x))
measurements[[counter]] <- list(I, y, sigma, cl)
counter <- counter + 1
}
engine = mbi$FactoredInference(domain, log=TRUE, iters=200L)
#engine =  mbi$LocalInference(domain,
#                             log = TRUE,
#                             iters = 2500L,
#                            marginal_oracle = 'convex')
model = engine$estimate(measurements, total = total)
synth = model$synthetic_data(rows = as.integer(total))
return(synth)
}
statistics_of_interest <- function(x) {
list(
mean = apply(x$df, 2, mean),
quantiles = apply(x$df, 2, quantile, c(0.1, 0.25, 0.5, 0.75, 0.9)),
logit_coefs = coef(
glm(
x$df$`income>50K` ~ x$df$age + x$df$workclass + x$df$`education-num` + x$df$`hours-per-week`,
family = binomial(link = "logit")
)
)
)
}
bootstrap_loop <-
function(x_tilde,
mechanism,
statistics_of_interest,
B) {
theta_tilde_tilde_list <- vector("list", length = B)
cli::cli_progress_bar("Bootstrapping", total = B)
for (b in 1:B) {
pois <- rpois(nrow(x_tilde$df), 1)
boot_samp <- NULL
for (i in 1:length(pois)) {
boot_samp <- c(boot_samp, rep(i, pois[i]))
}
x_tilde_hat <- x_tilde
x_tilde_hat$df <- x_tilde$df[boot_samp,]
x_tilde_tilde <- mechanism(x_tilde_hat)
theta_tilde_tilde <- statistics_of_interest(x_tilde_tilde)
theta_tilde_tilde_list[[b]] <- theta_tilde_tilde
cli::cli_progress_update()
}
return(theta_tilde_tilde_list)
}
results <- dp_bootstrap(
x = data,
mechanism = mechanism,
statistics_of_interest = statistics_of_interest,
B = 10,
bootstrap_loop
)
apply(sapply(results$theta_tilde_tilde, function(x) x$logit_coefs), 1, quantile, c(0.025, 0.975))
statistics_of_interest(full_data)
results <- dp_bootstrap(
x = data,
mechanism = mechanism,
statistics_of_interest = statistics_of_interest,
B = 500,
bootstrap_loop
)
apply(sapply(results$theta_tilde_tilde, function(x) x$logit_coefs), 1, quantile, c(0.025, 0.975))
statistics_of_interest(full_data)
statistics_of_interest(data)
nrow(data$df)
nrow(full_data$df)
full_data <-
mbi$Dataset$load(
'/Users/marcelneunhoeffer/Desktop/github/private-pgm/data/adult.csv',
'/Users/marcelneunhoeffer/Desktop/github/private-pgm/data/adult-domain.json'
)
data <-
mbi$Dataset$load(
'/Users/marcelneunhoeffer/Desktop/github/private-pgm/data/adult.csv',
'/Users/marcelneunhoeffer/Desktop/github/private-pgm/data/adult-domain.json'
)
data$df <- data$df[sample(nrow(data$df), size = 2000), ]
statistics_of_interest(data)
statistics_of_interest(full_data)
nrow(full_data$df)
nrow(data$df)
nrow(full_data$df)
statistics_of_interest(full_data)
apply(sapply(results$theta_tilde_tilde, function(x) x$logit_coefs), 1, quantile, c(0.025, 0.975))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(dpBootstrap)
data <- exp(rnorm(1000))
mechanism <- function(x) {
lower_bound <- 0
upper_bound <- 40
# This generates a projected dp cdf of the data. All functions are part of the
# dpBootstrap package.
projected_dp_cdf <-
x |> bin_data(lower_bound = lower_bound, upper_bound = upper_bound) |> dp_cdf(rho = 0.5) |>
project_dp_cdf()
# For the generic pipeline to work we want the output of the mechanism to be
# synthetic data in the same format as the input data.
M_inv <- get_inv_M(length(projected_dp_cdf$y))
# Get counts per bin
tmp_count <-
round(M_inv %*% projected_dp_cdf$y * projected_dp_cdf$n, 0)
# Replicate each bin the number of counts (this will bias mean estimation on
# the synthetic data by approx. bin_width/2)
synth_data <- NULL
for (i in 1:nrow(tmp_count)) {
synth_data <-
c(synth_data, rep(projected_dp_cdf$x[i], tmp_count[i,]))
}
# Make sure that examples in the excess bins are outside the boundaries but
# not -Inf or Inf (R won't count them otherwise).
synth_data[synth_data == -Inf] <- lower_bound - 1
synth_data[synth_data == Inf] <- upper_bound + 1
return(synth_data)
}
statistics_of_interest <- function(x) {
list(median = median(x),
mean = mean(x),
quantiles = quantile(x, c(0.1, 0.25, 0.75, 0.9)))
}
bootstrap_loop <-
function(x_tilde,
mechanism,
statistics_of_interest,
B) {
theta_tilde_tilde_list <-
vector("list", length = B)
cli::cli_progress_bar("Bootstrapping", total = B)
for (b in 1:B) {
pois <- rpois(length(x_tilde), 1)
boot_samp <- NULL
for (i in 1:length(pois)) {
boot_samp <- c(boot_samp, rep(i, pois[i]))
}
x_tilde_hat <- x_tilde[boot_samp]
x_tilde_tilde <- mechanism(x_tilde_hat)
theta_tilde_tilde <- statistics_of_interest(x_tilde_tilde)
theta_tilde_tilde_list[[b]] <- theta_tilde_tilde
cli::cli_progress_update()
}
return(theta_tilde_tilde_list)
}
load_all()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(dpBootstrap)
data <- exp(rnorm(1000))
mechanism <- function(x) {
lower_bound <- 0
upper_bound <- 40
# This generates a projected dp cdf of the data. All functions are part of the
# dpBootstrap package.
projected_dp_cdf <-
x |> bin_data(lower_bound = lower_bound, upper_bound = upper_bound) |> dp_cdf(rho = 0.5) |>
project_dp_cdf()
# For the generic pipeline to work we want the output of the mechanism to be
# synthetic data in the same format as the input data.
M_inv <- get_inv_M(length(projected_dp_cdf$y))
# Get counts per bin
tmp_count <-
round(M_inv %*% projected_dp_cdf$y * projected_dp_cdf$n, 0)
# Replicate each bin the number of counts (this will bias mean estimation on
# the synthetic data by approx. bin_width/2)
synth_data <- NULL
for (i in 1:nrow(tmp_count)) {
synth_data <-
c(synth_data, rep(projected_dp_cdf$x[i], tmp_count[i,]))
}
# Make sure that examples in the excess bins are outside the boundaries but
# not -Inf or Inf (R won't count them otherwise).
synth_data[synth_data == -Inf] <- lower_bound - 1
synth_data[synth_data == Inf] <- upper_bound + 1
return(synth_data)
}
statistics_of_interest <- function(x) {
list(median = median(x),
mean = mean(x),
quantiles = quantile(x, c(0.1, 0.25, 0.75, 0.9)))
}
bootstrap_loop <-
function(x_tilde,
mechanism,
statistics_of_interest,
B) {
theta_tilde_tilde_list <-
vector("list", length = B)
cli::cli_progress_bar("Bootstrapping", total = B)
for (b in 1:B) {
pois <- rpois(length(x_tilde), 1)
boot_samp <- NULL
for (i in 1:length(pois)) {
boot_samp <- c(boot_samp, rep(i, pois[i]))
}
x_tilde_hat <- x_tilde[boot_samp]
x_tilde_tilde <- mechanism(x_tilde_hat)
theta_tilde_tilde <- statistics_of_interest(x_tilde_tilde)
theta_tilde_tilde_list[[b]] <- theta_tilde_tilde
cli::cli_progress_update()
}
return(theta_tilde_tilde_list)
}
results <- dp_bootstrap(
x = data,
mechanism = mechanism,
statistics_of_interest = statistics_of_interest,
B = 1000,
bootstrap_loop
)
results
lapply(results$theta_tilde_tilde, function(x) x$median)
sapply(results$theta_tilde_tilde, function(x) x$median)
quantile(sapply(results$theta_tilde_tilde, function(x) x$median), c(0.025, 0.975))
mechanism <- function(x) {
lower_bound <- 0
upper_bound <- 40
# This generates a projected dp cdf of the data. All functions are part of the
# dpBootstrap package.
projected_dp_cdf <-
x |> bin_data(lower_bound = lower_bound, upper_bound = upper_bound) |> dp_cdf(rho = 0.05) |>
project_dp_cdf()
# For the generic pipeline to work we want the output of the mechanism to be
# synthetic data in the same format as the input data.
M_inv <- get_inv_M(length(projected_dp_cdf$y))
# Get counts per bin
tmp_count <-
round(M_inv %*% projected_dp_cdf$y * projected_dp_cdf$n, 0)
# Replicate each bin the number of counts (this will bias mean estimation on
# the synthetic data by approx. bin_width/2)
synth_data <- NULL
for (i in 1:nrow(tmp_count)) {
synth_data <-
c(synth_data, rep(projected_dp_cdf$x[i], tmp_count[i,]))
}
# Make sure that examples in the excess bins are outside the boundaries but
# not -Inf or Inf (R won't count them otherwise).
synth_data[synth_data == -Inf] <- lower_bound - 1
synth_data[synth_data == Inf] <- upper_bound + 1
return(synth_data)
}
statistics_of_interest <- function(x) {
list(median = median(x),
mean = mean(x),
quantiles = quantile(x, c(0.1, 0.25, 0.75, 0.9)))
}
bootstrap_loop <-
function(x_tilde,
mechanism,
statistics_of_interest,
B) {
theta_tilde_tilde_list <-
vector("list", length = B)
cli::cli_progress_bar("Bootstrapping", total = B)
for (b in 1:B) {
pois <- rpois(length(x_tilde), 1)
boot_samp <- NULL
for (i in 1:length(pois)) {
boot_samp <- c(boot_samp, rep(i, pois[i]))
}
x_tilde_hat <- x_tilde[boot_samp]
x_tilde_tilde <- mechanism(x_tilde_hat)
theta_tilde_tilde <- statistics_of_interest(x_tilde_tilde)
theta_tilde_tilde_list[[b]] <- theta_tilde_tilde
cli::cli_progress_update()
}
return(theta_tilde_tilde_list)
}
results <- dp_bootstrap(
x = data,
mechanism = mechanism,
statistics_of_interest = statistics_of_interest,
B = 1000,
bootstrap_loop
)
quantile(sapply(results$theta_tilde_tilde, function(x) x$median), c(0.025, 0.975))
quantile(sapply(results$theta_tilde_tilde, function(x) x$median), c(0.025, 0.975))
mechanism <- function(x) {
lower_bound <- 0
upper_bound <- 40
# This generates a projected dp cdf of the data. All functions are part of the
# dpBootstrap package.
projected_dp_cdf <-
x |> bin_data(lower_bound = lower_bound, upper_bound = upper_bound) |> dp_cdf(rho = 0.01) |>
project_dp_cdf()
# For the generic pipeline to work we want the output of the mechanism to be
# synthetic data in the same format as the input data.
M_inv <- get_inv_M(length(projected_dp_cdf$y))
# Get counts per bin
tmp_count <-
round(M_inv %*% projected_dp_cdf$y * projected_dp_cdf$n, 0)
# Replicate each bin the number of counts (this will bias mean estimation on
# the synthetic data by approx. bin_width/2)
synth_data <- NULL
for (i in 1:nrow(tmp_count)) {
synth_data <-
c(synth_data, rep(projected_dp_cdf$x[i], tmp_count[i,]))
}
# Make sure that examples in the excess bins are outside the boundaries but
# not -Inf or Inf (R won't count them otherwise).
synth_data[synth_data == -Inf] <- lower_bound - 1
synth_data[synth_data == Inf] <- upper_bound + 1
return(synth_data)
}
statistics_of_interest <- function(x) {
list(median = median(x),
mean = mean(x),
quantiles = quantile(x, c(0.1, 0.25, 0.75, 0.9)))
}
bootstrap_loop <-
function(x_tilde,
mechanism,
statistics_of_interest,
B) {
theta_tilde_tilde_list <-
vector("list", length = B)
cli::cli_progress_bar("Bootstrapping", total = B)
for (b in 1:B) {
pois <- rpois(length(x_tilde), 1)
boot_samp <- NULL
for (i in 1:length(pois)) {
boot_samp <- c(boot_samp, rep(i, pois[i]))
}
x_tilde_hat <- x_tilde[boot_samp]
x_tilde_tilde <- mechanism(x_tilde_hat)
theta_tilde_tilde <- statistics_of_interest(x_tilde_tilde)
theta_tilde_tilde_list[[b]] <- theta_tilde_tilde
cli::cli_progress_update()
}
return(theta_tilde_tilde_list)
}
results <- dp_bootstrap(
x = data,
mechanism = mechanism,
statistics_of_interest = statistics_of_interest,
B = 1000,
bootstrap_loop
)
quantile(sapply(results$theta_tilde_tilde, function(x) x$median), c(0.025, 0.975))
mechanism <- function(x) {
lower_bound <- 0
upper_bound <- 40
# This generates a projected dp cdf of the data. All functions are part of the
# dpBootstrap package.
projected_dp_cdf <-
x |> bin_data(lower_bound = lower_bound, upper_bound = upper_bound) |> dp_cdf(rho = Inf) |>
project_dp_cdf()
# For the generic pipeline to work we want the output of the mechanism to be
# synthetic data in the same format as the input data.
M_inv <- get_inv_M(length(projected_dp_cdf$y))
# Get counts per bin
tmp_count <-
round(M_inv %*% projected_dp_cdf$y * projected_dp_cdf$n, 0)
# Replicate each bin the number of counts (this will bias mean estimation on
# the synthetic data by approx. bin_width/2)
synth_data <- NULL
for (i in 1:nrow(tmp_count)) {
synth_data <-
c(synth_data, rep(projected_dp_cdf$x[i], tmp_count[i,]))
}
# Make sure that examples in the excess bins are outside the boundaries but
# not -Inf or Inf (R won't count them otherwise).
synth_data[synth_data == -Inf] <- lower_bound - 1
synth_data[synth_data == Inf] <- upper_bound + 1
return(synth_data)
}
results <- dp_bootstrap(
x = data,
mechanism = mechanism,
statistics_of_interest = statistics_of_interest,
B = 1000,
bootstrap_loop
)
quantile(sapply(results$theta_tilde_tilde, function(x) x$median), c(0.025, 0.975))
quantile(sapply(results$theta_tilde_tilde, function(x) x$median), c(0.025, 0.975))
mechanism <- function(x) {
lower_bound <- 0
upper_bound <- 40
# This generates a projected dp cdf of the data. All functions are part of the
# dpBootstrap package.
projected_dp_cdf <-
x |> bin_data(lower_bound = lower_bound, upper_bound = upper_bound, n_bins = 5000) |> dp_cdf(rho = Inf) |>
project_dp_cdf()
# For the generic pipeline to work we want the output of the mechanism to be
# synthetic data in the same format as the input data.
M_inv <- get_inv_M(length(projected_dp_cdf$y))
# Get counts per bin
tmp_count <-
round(M_inv %*% projected_dp_cdf$y * projected_dp_cdf$n, 0)
# Replicate each bin the number of counts (this will bias mean estimation on
# the synthetic data by approx. bin_width/2)
synth_data <- NULL
for (i in 1:nrow(tmp_count)) {
synth_data <-
c(synth_data, rep(projected_dp_cdf$x[i], tmp_count[i,]))
}
# Make sure that examples in the excess bins are outside the boundaries but
# not -Inf or Inf (R won't count them otherwise).
synth_data[synth_data == -Inf] <- lower_bound - 1
synth_data[synth_data == Inf] <- upper_bound + 1
return(synth_data)
}
results <- dp_bootstrap(
x = data,
mechanism = mechanism,
statistics_of_interest = statistics_of_interest,
B = 1000,
bootstrap_loop
)
mechanism <- function(x) {
lower_bound <- -3
upper_bound <- 3
# This generates a projected dp cdf of the data. All functions are part of the
# dpBootstrap package.
projected_dp_cdf <-
x |> bin_data(lower_bound = lower_bound, upper_bound = upper_bound, n_bins = 1000) |> dp_cdf(rho = Inf) |>
project_dp_cdf()
# For the generic pipeline to work we want the output of the mechanism to be
# synthetic data in the same format as the input data.
M_inv <- get_inv_M(length(projected_dp_cdf$y))
# Get counts per bin
tmp_count <-
round(M_inv %*% projected_dp_cdf$y * projected_dp_cdf$n, 0)
# Replicate each bin the number of counts (this will bias mean estimation on
# the synthetic data by approx. bin_width/2)
synth_data <- NULL
for (i in 1:nrow(tmp_count)) {
synth_data <-
c(synth_data, rep(projected_dp_cdf$x[i], tmp_count[i,]))
}
# Make sure that examples in the excess bins are outside the boundaries but
# not -Inf or Inf (R won't count them otherwise).
synth_data[synth_data == -Inf] <- lower_bound - 1
synth_data[synth_data == Inf] <- upper_bound + 1
return(synth_data)
}
data <- (rnorm(1000))
mechanism <- function(x) {
lower_bound <- -3
upper_bound <- 3
# This generates a projected dp cdf of the data. All functions are part of the
# dpBootstrap package.
projected_dp_cdf <-
x |> bin_data(lower_bound = lower_bound, upper_bound = upper_bound, n_bins = 1000) |> dp_cdf(rho = Inf) |>
project_dp_cdf()
# For the generic pipeline to work we want the output of the mechanism to be
# synthetic data in the same format as the input data.
M_inv <- get_inv_M(length(projected_dp_cdf$y))
# Get counts per bin
tmp_count <-
round(M_inv %*% projected_dp_cdf$y * projected_dp_cdf$n, 0)
# Replicate each bin the number of counts (this will bias mean estimation on
# the synthetic data by approx. bin_width/2)
synth_data <- NULL
for (i in 1:nrow(tmp_count)) {
synth_data <-
c(synth_data, rep(projected_dp_cdf$x[i], tmp_count[i,]))
}
# Make sure that examples in the excess bins are outside the boundaries but
# not -Inf or Inf (R won't count them otherwise).
synth_data[synth_data == -Inf] <- lower_bound - 1
synth_data[synth_data == Inf] <- upper_bound + 1
return(synth_data)
}
results <- dp_bootstrap(
x = data,
mechanism = mechanism,
statistics_of_interest = statistics_of_interest,
B = 1000,
bootstrap_loop
)
quantile(sapply(results$theta_tilde_tilde, function(x) x$median), c(0.025, 0.975))
