),
mc.cores = 4,
mc.set.seed = TRUE
)
mc_results <- lapply(1:M, function(x) readRDS(here::here(paste0("experiments/multivariate2_", x, ".RDS")))|> get_results(alpha = 0.05, pivot = F))
savehistory("~/Desktop/dpb_history.txt")
library(zeallot)
library(reticulate)
use_condaenv("r-reticulate")
reticulate::source_python("python/dp_gan.py")
torch <- reticulate::import("torch")
dataset <- AdultDataset()
test_dataset <- AdultDataset()
full_dataset <- AdultDataset()
means <- colMeans(dataset$data)
sds <- apply(dataset$data, 2, sd)
dataset$data <- sweep(sweep(dataset$data, 2, means, "-"), 2, sds, "/")
train_set <- sample(nrow(dataset$data), 5000)
dataset$data <- dataset$data[train_set, ]
test_dataset$data <- sweep(sweep(test_dataset$data, 2, means, "-"), 2, sds, "/")
test_dataset$data <- test_dataset$data[-train_set, ]
full_dataset$data <- sweep(sweep(full_dataset$data, 2, means, "-"), 2, sds, "/")
adult_names <- c("age", "workclass", "fnlwgt", "education-num",
"marital-status", "occupation", "relationship",
"race", "sex", "capital-gain", "capital-loss",
"hours-per-week", "native-country", "income>50K")
testset <- test_dataset$data
testset <- data.frame(test_dataset$data)
testset <- sweep(sweep(testset, 2, sds, "*"), 2, means, "+")
colnames(testset) <- adult_names
testset$`income>50K` <- (testset$`income>50K`>0.5)*1
mechanism <- function(data) {
helper <- AdultDataset()
dataloader = DataLoader(data, batch_size=128L)
epochs <- 10L
noise_dim <- 25L
c(d_net, g_net, d_optim, g_optim, clipper, privacy_engine) %<-% setup_dp_gan(epochs = epochs, epsilon = 1, noise_dim = noise_dim, dataloader = dataloader)
training_loop(epochs, dataloader, data, d_net, g_net, d_optim, g_optim, clipper, noise_dim = noise_dim)
# Inference
z <- torch$randn(c(5000L, noise_dim))
fake_data <- g_net(z)
synthetic_dataset <- fake_data$detach()$cpu()$numpy()
synth <- helper
synth$data <- synthetic_dataset
return(synth)
}
statistics_of_interest <- function(x) {
df <- data.frame(x$data)
df <- sweep(sweep(df, 2, sds, "*"), 2, means, "+")
colnames(df) <- adult_names
df$`income>50K` <- (df$`income>50K`>0.5)*1
m1 <- glm(
`income>50K` ~ age + workclass + `education-num` + `hours-per-week`,
family = binomial(link = "logit"), data = df
)
auc <- as.numeric(pROC::auc(pROC::roc(testset$`income>50K`, predict.glm(m1, newdata = testset, type = "response"), direction = "<")))
list(
mean = apply(df, 2, mean),
logit_coefs = coef(
m1
),
auc = auc
)
}
bootstrap_loop <-
function(x_tilde,
mechanism,
statistics_of_interest,
B) {
theta_tilde_tilde_list <- vector("list", length = B)
cli::cli_progress_bar("Bootstrapping", total = B)
for (b in 1:B) {
pois <- rpois(nrow(x_tilde$data), 1)
boot_samp <- NULL
for (i in 1:length(pois)) {
boot_samp <- c(boot_samp, rep(i, pois[i]))
}
x_tilde_hat <- x_tilde
x_tilde_hat$data <- x_tilde$data[boot_samp,]
x_tilde_tilde <- mechanism(x_tilde_hat)
theta_tilde_tilde <- statistics_of_interest(x_tilde_tilde)
theta_tilde_tilde_list[[b]] <- theta_tilde_tilde
cli::cli_progress_update()
}
return(theta_tilde_tilde_list)
}
results_gan1 <- dp_bootstrap(
x = dataset,
mechanism = mechanism,
statistics_of_interest = statistics_of_interest,
B = 10,
bootstrap_loop
)
library(dpBootstrap)
results_gan1 <- dp_bootstrap(
x = dataset,
mechanism = mechanism,
statistics_of_interest = statistics_of_interest,
B = 10,
bootstrap_loop
)
library(dpBootstrap)
library(reticulate)
use_condaenv("r-reticulate")
# You need to install the private-pgm python package in the conda environment
# to get started.
mbi <- reticulate::import("mbi")
sp <- reticulate::import("scipy")
full_data <-
mbi$Dataset$load(
'/Users/marcelneunhoeffer/Desktop/github/private-pgm/data/adult.csv',
'/Users/marcelneunhoeffer/Desktop/github/private-pgm/data/adult-domain.json'
)
data <-
mbi$Dataset$load(
'/Users/marcelneunhoeffer/Desktop/github/private-pgm/data/adult.csv',
'/Users/marcelneunhoeffer/Desktop/github/private-pgm/data/adult-domain.json'
)
test_data <-
mbi$Dataset$load(
'/Users/marcelneunhoeffer/Desktop/github/private-pgm/data/adult.csv',
'/Users/marcelneunhoeffer/Desktop/github/private-pgm/data/adult-domain.json'
)
full_data <-
mbi$Dataset$load(
'/Users/marcelneunhoeffer/Desktop/github/private-pgm/data/adult.csv',
'/Users/marcelneunhoeffer/Desktop/github/private-pgm/data/adult-domain.json'
)
metadata <-
mbi$Dataset$load(
'/Users/marcelneunhoeffer/Desktop/github/private-pgm/data/adult.csv',
'/Users/marcelneunhoeffer/Desktop/github/private-pgm/data/adult-domain.json'
)
data_array <- full_data$df()
data_array <- full_data$df
data_array <- as.matrix(full_data$df)
data_array
colnames(metadata$df)
data.frame(data_array)
data.frame(data_array,check.names = F)
dim(metadata$df)[1]
pgm_mechanism <- function(data, metadata, cliques = list(), epsilon = 1, iters = 200L) {
rdomain <- colnames(metadata$df)
metadata$df <- data.frame(data, check.names = FALSE)
domain <- metadata$domain
total <- dim(metadata$df)[1]
epsilon_split = epsilon / (length(domain) + length(cliques))
sigma = 2.0 / epsilon_split
measurements <- list()
counter <- 1
for (col in rdomain) {
x <- metadata$project(col)$datavector()
y = x + rlaplace(n = length(x), b = sigma)
I = Matrix::Diagonal(length(x))
measurements[[counter]] <- list(I, y, sigma, list(col))
counter <- counter + 1
}
if(length(cliques) > 0){
for (cl in cliques) {
x = metadata$project(cl)$datavector()
y = x + rlaplace(n = length(x), b = sigma)
I = Matrix::Diagonal(length(x))
measurements[[counter]] <- list(I, y, sigma, cl)
counter <- counter + 1
}
}
engine = mbi$FactoredInference(domain, log=TRUE, iters=iters)
#engine =  mbi$LocalInference(domain,
#                             log = TRUE,
#                             iters = 2500L,
#                            marginal_oracle = 'convex')
model = engine$estimate(measurements, total = total)
#synth = model$synthetic_data(rows = as.integer(total))
return(model)
}
trained_model <- pgm_mechanism(data_array[1:100,], meta_data, cliques = list(list("age", "education-num")), epsilon = 100, iters = 2000L)
trained_model <- pgm_mechanism(data_array[1:100,], metadata, cliques = list(list("age", "education-num")), epsilon = 100, iters = 2000L)
rlaplace <- function(n, b) {
rexp(n, 1 / b) - rexp(n, 1 / b)
}
trained_model <- pgm_mechanism(data_array[1:100,], metadata, cliques = list(list("age", "education-num")), epsilon = 100, iters = 2000L)
trained_model$synthetic_data(nrow(data$df))$df
nrow(metadata$df)
trained_model$synthetic_data(nrow(metadata$df))$df
P_tilde$synthetic_data(nrow(metadata$df))$df
trained_model$synthetic_data(nrow(metadata$df))$df
trained_model$synthetic_data(nrow(metadata$df)*10)$df
trained_model$synthetic_data(nrow(metadata$df)*10L)$df
trained_model$synthetic_data(nrow(metadata$df)*100L)$df
get_synthetic_data_from_pgm <- function(P_tilde, metadata, sample = TRUE) {
if(sample) {
synthetic_data <- P_tilde$synthetic_data(nrow(metadata$df))$df
} else {
synthetic_data <- P_tilde$synthetic_data(nrow(metadata$df)*10L)$df
}
return(synthetic_data)
}
get_synthetic_data_from_pgm(trained_model, metadata)
get_synthetic_data_from_pgm(trained_model, metadata, sample = F)
get_synthetic_data_from_pgm(trained_model, metadata, sample = T)
get_synthetic_data_from_pgm(trained_model, metadata, sample = F)
test <- get_synthetic_data_from_pgm(trained_model, metadata, sample = F)
pgm_mechanism(test, metadata, cliques = list(list("age", "education-num")), epsilon = 100, iters = 2000L)
statistics_of_interest <- function(P_tilde, metadata) {
synth = P_tilde$synthetic_data(rows = as.integer(n))
df <- get_synthetic_data_from_pgm(P_tilde, metadata, sample = FALSE)
m1 <- glm(
`income>50K` ~ age + workclass + `education-num` + `hours-per-week`,
family = binomial(link = "logit"), data = df
)
list(
mean = apply(df, 2, mean),
quantiles = apply(df, 2, quantile, c(0.1, 0.25, 0.5, 0.75, 0.9)),
logit_coefs = coef(
m1
)
)
}
statistics_of_interest(trained_model, metadata)
statistics_of_interest <- function(P_tilde, metadata) {
df <- get_synthetic_data_from_pgm(P_tilde, metadata, sample = FALSE)
m1 <- glm(
`income>50K` ~ age + workclass + `education-num` + `hours-per-week`,
family = binomial(link = "logit"), data = df
)
list(
mean = apply(df, 2, mean),
quantiles = apply(df, 2, quantile, c(0.1, 0.25, 0.5, 0.75, 0.9)),
logit_coefs = coef(
m1
)
)
}
statistics_of_interest(trained_model, metadata)
run_experiment(
run_id = paste0("newtest_", 1),
results_directory = NULL,
population = data_array,
n = 250,
mechanism = pgm_mechanism,
metadata = metadata,
get_synthetic_data = get_synthetic_data_from_pgm,
statistics_of_interest = statistics_of_interest,
B = 10,
store_P_tilde = TRUE,
store_P_tilde_tilde = FALSE
)
get_synthetic_data_from_pgm <- function(P_tilde, n, sample = TRUE) {
if(sample) {
synthetic_data <- P_tilde$synthetic_data(as.integer(n))$df
} else {
synthetic_data <- P_tilde$synthetic_data(as.integer(n)*10L)$df
}
return(synthetic_data)
}
run_experiment(
run_id = paste0("newtest_", 1),
results_directory = NULL,
population = data_array,
n = 250,
mechanism = pgm_mechanism,
metadata = metadata,
get_synthetic_data = get_synthetic_data_from_pgm,
statistics_of_interest = statistics_of_interest,
B = 10,
store_P_tilde = TRUE,
store_P_tilde_tilde = FALSE
)
get_synthetic_data_from_pgm
run_experiment(
run_id = paste0("newtest_", 1),
results_directory = NULL,
population = data_array,
n = 250,
mechanism = pgm_mechanism,
metadata = metadata,
get_synthetic_data = get_synthetic_data_from_pgm,
statistics_of_interest = statistics_of_interest,
B = 10,
store_P_tilde = TRUE,
store_P_tilde_tilde = FALSE
)
statistics_of_interest <- function(P_tilde) {
df <- get_synthetic_data_from_pgm(P_tilde, n, sample = FALSE)
m1 <- glm(
`income>50K` ~ age + workclass + `education-num` + `hours-per-week`,
family = binomial(link = "logit"), data = df
)
list(
mean = apply(df, 2, mean),
quantiles = apply(df, 2, quantile, c(0.1, 0.25, 0.5, 0.75, 0.9)),
logit_coefs = coef(
m1
)
)
}
run_experiment(
run_id = paste0("newtest_", 1),
results_directory = NULL,
population = data_array,
n = 250,
mechanism = pgm_mechanism,
metadata = metadata,
get_synthetic_data = get_synthetic_data_from_pgm,
statistics_of_interest = statistics_of_interest,
B = 10,
store_P_tilde = TRUE,
store_P_tilde_tilde = FALSE
)
statistics_of_interest <- function(P_tilde, n = n) {
df <- get_synthetic_data_from_pgm(P_tilde, n, sample = FALSE)
m1 <- glm(
`income>50K` ~ age + workclass + `education-num` + `hours-per-week`,
family = binomial(link = "logit"), data = df
)
list(
mean = apply(df, 2, mean),
quantiles = apply(df, 2, quantile, c(0.1, 0.25, 0.5, 0.75, 0.9)),
logit_coefs = coef(
m1
)
)
}
run_experiment(
run_id = paste0("newtest_", 1),
results_directory = NULL,
population = data_array,
n = 250,
mechanism = pgm_mechanism,
metadata = metadata,
get_synthetic_data = get_synthetic_data_from_pgm,
statistics_of_interest = statistics_of_interest,
B = 10,
store_P_tilde = TRUE,
store_P_tilde_tilde = FALSE
)
statistics_of_interest <- function(P_tilde, n = 250L) {
df <- get_synthetic_data_from_pgm(P_tilde, n, sample = FALSE)
m1 <- glm(
`income>50K` ~ age + workclass + `education-num` + `hours-per-week`,
family = binomial(link = "logit"), data = df
)
list(
mean = apply(df, 2, mean),
quantiles = apply(df, 2, quantile, c(0.1, 0.25, 0.5, 0.75, 0.9)),
logit_coefs = coef(
m1
)
)
}
run_experiment(
run_id = paste0("newtest_", 1),
results_directory = NULL,
population = data_array,
n = 250,
mechanism = pgm_mechanism,
metadata = metadata,
get_synthetic_data = get_synthetic_data_from_pgm,
statistics_of_interest = statistics_of_interest,
B = 10,
store_P_tilde = TRUE,
store_P_tilde_tilde = FALSE
)
get_synthetic_data_from_pgm <- function(P_tilde, n = 250L, sample = TRUE) {
if(sample) {
synthetic_data <- P_tilde$synthetic_data(as.integer(n))$df
} else {
synthetic_data <- P_tilde$synthetic_data(as.integer(n)*10L)$df
}
return(synthetic_data)
}
statistics_of_interest <- function(P_tilde) {
df <- get_synthetic_data_from_pgm(P_tilde, sample = FALSE)
m1 <- glm(
`income>50K` ~ age + workclass + `education-num` + `hours-per-week`,
family = binomial(link = "logit"), data = df
)
list(
mean = apply(df, 2, mean),
quantiles = apply(df, 2, quantile, c(0.1, 0.25, 0.5, 0.75, 0.9)),
logit_coefs = coef(
m1
)
)
}
run_experiment(
run_id = paste0("newtest_", 1),
results_directory = NULL,
population = data_array,
n = 250,
mechanism = pgm_mechanism,
metadata = metadata,
get_synthetic_data = get_synthetic_data_from_pgm,
statistics_of_interest = statistics_of_interest,
B = 10,
store_P_tilde = TRUE,
store_P_tilde_tilde = FALSE
)
newtest_1 <- readRDS("~/Desktop/github/dpBootstrap/experiments/newtest_1.RDS")
get_synthetic_data_from_pgm <- function(P_tilde, n = 5000L, sample = TRUE) {
if(sample) {
synthetic_data <- P_tilde$synthetic_data(as.integer(n))$df
} else {
synthetic_data <- P_tilde$synthetic_data(as.integer(n)*10L)$df
}
return(synthetic_data)
}
statistics_of_interest <- function(P_tilde) {
df <- get_synthetic_data_from_pgm(P_tilde, sample = FALSE)
m1 <- glm(
`income>50K` ~ age + workclass + `education-num` + `hours-per-week`,
family = binomial(link = "logit"), data = df
)
list(
mean = apply(df, 2, mean),
quantiles = apply(df, 2, quantile, c(0.1, 0.25, 0.5, 0.75, 0.9)),
logit_coefs = coef(
m1
)
)
}
statistics_of_interest(trained_model, metadata)
statistics_of_interest(trained_model)
trained_model
pgm_mechanism
run_experiment(
run_id = paste0("newtest_", 1),
results_directory = NULL,
population = data_array,
n = 5000,
mechanism = pgm_mechanism,
metadata = metadata,
get_synthetic_data = get_synthetic_data_from_pgm,
statistics_of_interest = statistics_of_interest,
B = 100,
store_P_tilde = TRUE,
store_P_tilde_tilde = FALSE
)
RNGkind("L'Ecuyer-CMRG")
set.seed(20220706)
M <- 4
parallel::mclapply(
X = 1:M,
FUN = function(x)
run_experiment(
run_id = paste0("newtest_", x),
results_directory = NULL,
population = data_array,
n = 5000,
mechanism = pgm_mechanism,
metadata = metadata,
get_synthetic_data = get_synthetic_data_from_pgm,
statistics_of_interest = statistics_of_interest,
B = 100,
store_P_tilde = TRUE,
store_P_tilde_tilde = FALSE
),
mc.cores = 4,
mc.set.seed = TRUE,
mc.cleanup = TRUE
)
RNGkind("L'Ecuyer-CMRG")
set.seed(20220706)
M <- 100
parallel::mclapply(
X = 1:M,
FUN = function(x)
run_experiment(
run_id = paste0("multivariate_no_corr_", x),
results_directory = NULL,
population = data_array,
n = 5000,
mechanism = pgm_mechanism,
metadata = metadata,
get_synthetic_data = get_synthetic_data_from_pgm,
statistics_of_interest = statistics_of_interest,
B = 100,
store_P_tilde = TRUE,
store_P_tilde_tilde = FALSE
),
mc.cores = 4,
mc.set.seed = TRUE,
mc.cleanup = TRUE
)
parallel::mclapply(
X = 1:M,
FUN = function(x)
run_experiment(
run_id = paste0("multivariate_bi_corr_", x),
results_directory = NULL,
population = data_array,
n = 5000,
mechanism = pgm_mechanism,
metadata = metadata,
cliques = list(
list('age', 'education-num'),
list('marital-status', 'race'),
list('sex', 'hours-per-week'),
list('hours-per-week', 'income>50K'),
list('education-num', 'income>50K'),
list('native-country', 'marital-status', 'occupation')
),
get_synthetic_data = get_synthetic_data_from_pgm,
statistics_of_interest = statistics_of_interest,
B = 100,
store_P_tilde = TRUE,
store_P_tilde_tilde = FALSE
),
mc.cores = 4,
mc.set.seed = TRUE,
mc.cleanup = TRUE
)
