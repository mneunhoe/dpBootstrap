# not -Inf or Inf (R won't count them otherwise).
synth_data[synth_data == -Inf] <- lower_bound - 1
synth_data[synth_data == Inf] <- upper_bound + 1
return(synth_data)
}
statistics_of_interest <- function(P_tilde, n = 1000) {
lower_bound <- P_tilde$x[2]
upper_bound <- P_tilde$x[length(P_tilde$x)-1]
# For the generic pipeline to work we want the output of the mechanism to be
# synthetic data in the same format as the input data.
M_inv <- get_inv_M(length(P_tilde$y))
# Get counts per bin
tmp_count <-
round(M_inv %*% P_tilde$y * P_tilde$n, 0)
# Replicate each bin the number of counts (this will bias mean estimation on
# the synthetic data by approx. bin_width/2)
synthetic_data <- NULL
for (i in 1:nrow(tmp_count)) {
synthetic_data <-
c(synthetic_data, rep(P_tilde$x[i], tmp_count[i,]))
}
# Make sure that examples in the excess bins are outside the boundaries but
# not -Inf or Inf (R won't count them otherwise).
synthetic_data[synthetic_data == -Inf] <- lower_bound - 1
synthetic_data[synthetic_data == Inf] <- upper_bound + 1
list(median = median(synthetic_data),
mean = mean(synthetic_data),
variance = mean(synthetic_data^2) - mean(synthetic_data)^2,
quantiles = quantile(synthetic_data, c(0.1, 0.25, 0.75, 0.9)))
}
statistics_of_interest_data <- function(data) {
list(median = median(data),
mean = mean(data),
variance = mean(data^2) - mean(data)^2,
quantiles = quantile(data, c(0.1, 0.25, 0.75, 0.9)))
}
statistics_of_interest_binned_data <- function(data) {
lower_bound <- -3
upper_bound <- 3
histogram <-
data |> bin_data(lower_bound = lower_bound,
upper_bound = upper_bound,
n_bins = 1000)
binned_data <- NULL
for (i in 1:length(histogram$histogram)) {
binned_data <-
c(binned_data, rep(histogram$breaks[i], histogram$histogram[i]))
}
list(median = median(binned_data),
mean = mean(binned_data),
variance = mean(binned_data^2) - mean(binned_data)^2,
quantiles = quantile(binned_data, c(0.1, 0.25, 0.75, 0.9)))
}
bootstrap_loop <-
function(P_tilde,
bootstrap_mechanism,
statistics_of_interest,
B) {
theta_tilde_tilde_list <- vector("list", length = B)
cli::cli_progress_bar("Bootstrapping", total = B)
for (b in 1:B) {
P_tilde_tilde <- bootstrap_mechanism(P_tilde)
theta_tilde_tilde <- statistics_of_interest(P_tilde_tilde)
theta_tilde_tilde_list[[b]] <- theta_tilde_tilde
cli::cli_progress_update()
}
return(theta_tilde_tilde_list)
}
data_mechanism <- function(data) {
# Set hyperparameters of mechanism
lower_bound <- -3
upper_bound <- 3
# This generates a projected dp cdf of the data. All functions are part of the
# dpBootstrap package.
projected_dp_cdf <-
data |> bin_data(lower_bound = lower_bound,
upper_bound = upper_bound,
n_bins = 1000) |> dp_cdf(rho = 0.5) |>
project_dp_cdf()
return(projected_dp_cdf)
}
P_tilde <- data_mechanism(data)
bootstrap_mechanism <- function(P_tilde, n = 1000) {
lower_bound <- P_tilde$x[2]
upper_bound <- P_tilde$x[length(P_tilde$x)-1]
# For the generic pipeline to work we want the output of the mechanism to be
# synthetic data in the same format as the input data.
M_inv <- get_inv_M(length(P_tilde$y))
# Get counts per bin
tmp_count <-
rmultinom(1, P_tilde$n, M_inv %*% P_tilde$y)
# Replicate each bin the number of counts (this will bias mean estimation on
# the synthetic data by approx. bin_width/2)
synthetic_data <- NULL
for (i in 1:nrow(tmp_count)) {
synthetic_data <-
c(synthetic_data, rep(P_tilde$x[i], tmp_count[i,]))
}
# Make sure that examples in the excess bins are outside the boundaries but
# not -Inf or Inf (R won't count them otherwise).
synthetic_data[synthetic_data == -Inf] <- lower_bound - 1
synthetic_data[synthetic_data == Inf] <- upper_bound + 1
projected_dp_cdf <-
synthetic_data |> bin_data(lower_bound = lower_bound,
upper_bound = upper_bound,
n_bins = 1000) |> dp_cdf(rho = 0.5) |>
project_dp_cdf()
return(projected_dp_cdf)
}
data <- (rnorm(1000))
statistics_of_interest <- function(P_tilde, n = 1000) {
lower_bound <- P_tilde$x[2]
upper_bound <- P_tilde$x[length(P_tilde$x)-1]
# For the generic pipeline to work we want the output of the mechanism to be
# synthetic data in the same format as the input data.
M_inv <- get_inv_M(length(P_tilde$y))
# Get counts per bin
tmp_count <-
round(M_inv %*% P_tilde$y * P_tilde$n, 0)
# Replicate each bin the number of counts (this will bias mean estimation on
# the synthetic data by approx. bin_width/2)
synthetic_data <- NULL
for (i in 1:nrow(tmp_count)) {
synthetic_data <-
c(synthetic_data, rep(P_tilde$x[i], tmp_count[i,]))
}
# Make sure that examples in the excess bins are outside the boundaries but
# not -Inf or Inf (R won't count them otherwise).
synthetic_data[synthetic_data == -Inf] <- lower_bound - 1
synthetic_data[synthetic_data == Inf] <- upper_bound + 1
list(median = median(synthetic_data),
mean = mean(synthetic_data),
variance = mean(synthetic_data^2) - mean(synthetic_data)^2,
quantiles = quantile(synthetic_data, c(0.1, 0.25, 0.75, 0.9)))
}
statistics_of_interest_data <- function(data) {
list(median = median(data),
mean = mean(data),
variance = mean(data^2) - mean(data)^2,
quantiles = quantile(data, c(0.1, 0.25, 0.75, 0.9)))
}
statistics_of_interest_binned_data <- function(data) {
lower_bound <- -3
upper_bound <- 3
histogram <-
data |> bin_data(lower_bound = lower_bound,
upper_bound = upper_bound,
n_bins = 1000)
binned_data <- NULL
for (i in 1:length(histogram$histogram)) {
binned_data <-
c(binned_data, rep(histogram$breaks[i], histogram$histogram[i]))
}
list(median = median(binned_data),
mean = mean(binned_data),
variance = mean(binned_data^2) - mean(binned_data)^2,
quantiles = quantile(binned_data, c(0.1, 0.25, 0.75, 0.9)))
}
bootstrap_loop <-
function(P_tilde,
bootstrap_mechanism,
statistics_of_interest,
B) {
# Initialize results object
theta_tilde_tilde_list <- vector("list", length = B)
# Progress bar
cli::cli_progress_bar("Bootstrapping", total = B)
for (b in 1:B) {
# Run mechanism
P_tilde_tilde <- bootstrap_mechanism(P_tilde)
# Calculate statistics
theta_tilde_tilde <- statistics_of_interest(P_tilde_tilde)
# Store statistics
theta_tilde_tilde_list[[b]] <- theta_tilde_tilde
# Update Progress bar
cli::cli_progress_update()
}
return(theta_tilde_tilde_list)
}
cdf_results <- dp_bootstrap(
x = data,
data_mechanism = data_mechanism,
bootstrap_mechanism = bootstrap_mechanism,
statistics_of_interest = statistics_of_interest,
B = 100,
bootstrap_loop
)
cdf_results
cdf_results <- dp_bootstrap(
x = data,
data_mechanism = data_mechanism,
bootstrap_mechanism = bootstrap_mechanism,
statistics_of_interest = statistics_of_interest,
B = 1000,
bootstrap_loop
)
cdf_results
unname(cdf_results)
compact_cdf_results <- cdf_results
compact_cdf_results$theta_tilde_tilde <- unname(compact_cdf_results$theta_tilde_tilde)
compact_cdf_results
compact_cdf_results$theta_tilde_tilde
compact_cdf_results <- cdf_results
compact_cdf_results <- unname(compact_cdf_results)
compact_cdf_results
compact_cdf_results[[2]]
lapply(compact_cdf_results[[2]], function(x) unname(x))
compact_cdf_results[[2]] <- lapply(compact_cdf_results[[2]], function(x) unname(x))
a <- rnorm(7000)
object.size(a)
object.size(compact_cdf_results)
vector("list", 1000)
object.size(vector("list", 1000))
a <- rnorm(4)
names(a) <- c("10%", "20%", "30%", "40%")
a <- rnorm(4)
object.size(a)
names(a) <- c("10%", "20%", "30%", "40%")
object.size(a)
quantile(synthetic_data, c(0.1, 0.25, 0.75, 0.9)))
quantile(synthetic_data, c(0.1, 0.25, 0.75, 0.9))
quantile(synthetic_data, c(0.1, 0.25, 0.75, 0.9))
P_tilde
lower_bound <- P_tilde$x[2]
upper_bound <- P_tilde$x[length(P_tilde$x)-1]
# For the generic pipeline to work we want the output of the mechanism to be
# synthetic data in the same format as the input data.
M_inv <- get_inv_M(length(P_tilde$y))
# Get counts per bin
tmp_count <-
round(M_inv %*% P_tilde$y * P_tilde$n, 0)
# Replicate each bin the number of counts (this will bias mean estimation on
# the synthetic data by approx. bin_width/2)
synthetic_data <- NULL
for (i in 1:nrow(tmp_count)) {
synthetic_data <-
c(synthetic_data, rep(P_tilde$x[i], tmp_count[i,]))
}
# Make sure that examples in the excess bins are outside the boundaries but
# not -Inf or Inf (R won't count them otherwise).
synthetic_data[synthetic_data == -Inf] <- lower_bound - 1
synthetic_data[synthetic_data == Inf] <- upper_bound + 1
quantile(synthetic_data, c(0.1, 0.25, 0.75, 0.9)))
quantile(synthetic_data, c(0.1, 0.25, 0.75, 0.9))
unname(quantile(synthetic_data, c(0.1, 0.25, 0.75, 0.9)))
statistics_of_interest <- function(P_tilde, n = 1000) {
lower_bound <- P_tilde$x[2]
upper_bound <- P_tilde$x[length(P_tilde$x)-1]
# For the generic pipeline to work we want the output of the mechanism to be
# synthetic data in the same format as the input data.
M_inv <- get_inv_M(length(P_tilde$y))
# Get counts per bin
tmp_count <-
round(M_inv %*% P_tilde$y * P_tilde$n, 0)
# Replicate each bin the number of counts (this will bias mean estimation on
# the synthetic data by approx. bin_width/2)
synthetic_data <- NULL
for (i in 1:nrow(tmp_count)) {
synthetic_data <-
c(synthetic_data, rep(P_tilde$x[i], tmp_count[i,]))
}
# Make sure that examples in the excess bins are outside the boundaries but
# not -Inf or Inf (R won't count them otherwise).
synthetic_data[synthetic_data == -Inf] <- lower_bound - 1
synthetic_data[synthetic_data == Inf] <- upper_bound + 1
list(median = median(synthetic_data),
mean = mean(synthetic_data),
variance = mean(synthetic_data^2) - mean(synthetic_data)^2,
quantiles = unname(quantile(synthetic_data, c(0.1, 0.25, 0.75, 0.9))))
}
statistics_of_interest_data <- function(data) {
list(median = median(data),
mean = mean(data),
variance = mean(data^2) - mean(data)^2,
quantiles = quantile(data, c(0.1, 0.25, 0.75, 0.9)))
}
statistics_of_interest_binned_data <- function(data) {
lower_bound <- -3
upper_bound <- 3
histogram <-
data |> bin_data(lower_bound = lower_bound,
upper_bound = upper_bound,
n_bins = 1000)
binned_data <- NULL
for (i in 1:length(histogram$histogram)) {
binned_data <-
c(binned_data, rep(histogram$breaks[i], histogram$histogram[i]))
}
list(median = median(binned_data),
mean = mean(binned_data),
variance = mean(binned_data^2) - mean(binned_data)^2,
quantiles = quantile(binned_data, c(0.1, 0.25, 0.75, 0.9)))
}
bootstrap_loop <-
function(P_tilde,
bootstrap_mechanism,
statistics_of_interest,
B) {
# Initialize results object
theta_tilde_tilde_list <- vector("list", length = B)
# Progress bar
cli::cli_progress_bar("Bootstrapping", total = B)
for (b in 1:B) {
# Run mechanism
P_tilde_tilde <- bootstrap_mechanism(P_tilde)
# Calculate statistics
theta_tilde_tilde <- statistics_of_interest(P_tilde_tilde)
# Store statistics
theta_tilde_tilde_list[[b]] <- theta_tilde_tilde
# Update Progress bar
cli::cli_progress_update()
}
return(theta_tilde_tilde_list)
}
cdf_results <- dp_bootstrap(
x = data,
data_mechanism = data_mechanism,
bootstrap_mechanism = bootstrap_mechanism,
statistics_of_interest = statistics_of_interest,
B = 1000,
bootstrap_loop
)
# get point estimates from first run
point_estimates <- cdf_results$theta_tilde
point_estimates
# And quantiles from bootstrap
confidence_intervals <- vector("list", length = length(point_estimates))
names(confidence_intervals) <- names(point_estimates)
for(n in names(confidence_intervals)){
tmp <- sapply(cdf_results$theta_tilde_tilde, function(x) x[[paste0(n)]])
if(is.null(dim(tmp))){
res <- quantile(tmp, c(0.025, 0.975))
} else {
res <- apply(tmp, 1, quantile, c(0.025, 0.975))
}
confidence_intervals[[paste0(n)]] <- res
}
confidence_intervals
get_results <- function(cdf_results, alpha = 0.05){
# get point estimates from first run
point_estimates <- cdf_results$theta_tilde
# And quantiles from bootstrap
confidence_intervals <- vector("list", length = length(point_estimates))
names(confidence_intervals) <- names(point_estimates)
for(n in names(confidence_intervals)){
tmp <- sapply(cdf_results$theta_tilde_tilde, function(x) x[[paste0(n)]])
if(is.null(dim(tmp))){
res <- quantile(tmp, c(alpha/2,1 - alpha/2))
} else {
res <- apply(tmp, 1, quantile, c(alpha/2,1 - alpha/2))
}
confidence_intervals[[paste0(n)]] <- res
}
return(list(point_estimates = point_estimates,
confidence_intervals = confidence_intervals))
}
get_results(cdf_results)
get_results(cdf_results)$point_estimates
data
projected_dp_cdf_mechanism <- function(data, ...) {
# Set hyperparameters of mechanism
lower_bound <- -3
upper_bound <- 3
# This generates a projected dp cdf of the data. All functions are part of the
# dpBootstrap package.
projected_dp_cdf <-
data |> bin_data(lower_bound = lower_bound,
upper_bound = upper_bound,
n_bins = 1000) |> dp_cdf(rho = 0.5) |>
project_dp_cdf()
return(projected_dp_cdf)
}
data
projected_dp_cdf_mechanism(data)
get_synthetic_data_from_cdf <- function(P_tilde) {
lower_bound <- P_tilde$x[2]
upper_bound <- P_tilde$x[length(P_tilde$x)-1]
# For the generic pipeline to work we want the output of the mechanism to be
# synthetic data in the same format as the input data.
M_inv <- get_inv_M(length(P_tilde$y))
# Get counts per bin
tmp_count <-
rmultinom(1, P_tilde$n, M_inv %*% P_tilde$y)
# Replicate each bin the number of counts (this will bias mean estimation on
# the synthetic data by approx. bin_width/2)
synthetic_data <- NULL
for (i in 1:nrow(tmp_count)) {
synthetic_data <-
c(synthetic_data, rep(P_tilde$x[i], tmp_count[i,]))
}
# Make sure that examples in the excess bins are outside the boundaries but
# not -Inf or Inf (R won't count them otherwise).
synthetic_data[synthetic_data == -Inf] <- lower_bound - 1
synthetic_data[synthetic_data == Inf] <- upper_bound + 1
return(synthetic_data)
}
projected_dp_cdf_mechanism <- function(data, ...) {
# Set hyperparameters of mechanism
lower_bound <- -3
upper_bound <- 3
# This generates a projected dp cdf of the data. All functions are part of the
# dpBootstrap package.
projected_dp_cdf <-
data |> bin_data(lower_bound = lower_bound,
upper_bound = upper_bound,
n_bins = 1000) |> dp_cdf(rho = 0.5) |>
project_dp_cdf()
return(projected_dp_cdf)
}
P_tilde <- projected_dp_cdf_mechanism(data)
P_tilde
get_synthetic_data_from_cdf(P_tilde)
?rnorm
load_all()
data <- (rnorm(1000))
projected_dp_cdf_mechanism <- function(data, ...) {
# Set hyperparameters of mechanism
lower_bound <- -3
upper_bound <- 3
# This generates a projected dp cdf of the data. All functions are part of the
# dpBootstrap package.
projected_dp_cdf <-
data |> bin_data(lower_bound = lower_bound,
upper_bound = upper_bound,
n_bins = 1000) |> dp_cdf(rho = 0.5) |>
project_dp_cdf()
return(projected_dp_cdf)
}
P_tilde <- projected_dp_cdf_mechanism(data)
P_tilde
get_synthetic_data_from_cdf(P_tilde)
get_synthetic_data_from_cdf
statistics_of_interest <- function(P_tilde) {
synthetic_data <- get_synthetic_data_from_cdf(P_tilde)
list(median = median(synthetic_data),
mean = mean(synthetic_data),
variance = mean(synthetic_data^2) - mean(synthetic_data)^2,
quantiles = unname(quantile(synthetic_data, c(0.1, 0.25, 0.75, 0.9))))
}
cdf_results <- dp_bootstrap(
x = data,
mechanism = projected_dp_cdf_mechanism,
get_synthetic_data = get_synthetic_data_from_cdf
statistics_of_interest = statistics_of_interest,
cdf_results <- dp_bootstrap(
x = data,
mechanism = projected_dp_cdf_mechanism,
get_synthetic_data = get_synthetic_data_from_cdf,
statistics_of_interest = statistics_of_interest,
B = 1000
)
cdf_results <- dp_bootstrap(
data = data,
mechanism = projected_dp_cdf_mechanism,
get_synthetic_data = get_synthetic_data_from_cdf,
statistics_of_interest = statistics_of_interest,
B = 1000
)
cdf_results
load_all()
cdf_results <- dp_bootstrap(
data = data,
mechanism = projected_dp_cdf_mechanism,
get_synthetic_data = get_synthetic_data_from_cdf,
statistics_of_interest = statistics_of_interest,
B = 100
)
load_all()
load_all()
cdf_results <- dp_bootstrap(
data = data,
mechanism = projected_dp_cdf_mechanism,
get_synthetic_data = get_synthetic_data_from_cdf,
statistics_of_interest = statistics_of_interest,
B = 100
)
cdf_results <- dp_bootstrap(
data = data,
mechanism = projected_dp_cdf_mechanism,
get_synthetic_data = get_synthetic_data_from_cdf,
statistics_of_interest = statistics_of_interest,
B = 1000
)
load_all()
object.size(cdf_results)
cdf_results <- dp_bootstrap(
data = data,
mechanism = projected_dp_cdf_mechanism,
get_synthetic_data = get_synthetic_data_from_cdf,
statistics_of_interest = statistics_of_interest,
B = 1000
)
object.size(cdf_results)
get_results <- function(cdf_results, alpha = 0.05){
# get point estimates from first run
point_estimates <- cdf_results$theta_tilde
# And quantiles from bootstrap
confidence_intervals <- vector("list", length = length(point_estimates))
names(confidence_intervals) <- names(point_estimates)
for(n in names(confidence_intervals)){
tmp <- sapply(cdf_results$theta_tilde_tilde, function(x) x[[paste0(n)]])
if(is.null(dim(tmp))){
res <- quantile(tmp, c(alpha/2,1 - alpha/2))
} else {
res <- apply(tmp, 1, quantile, c(alpha/2,1 - alpha/2))
}
confidence_intervals[[paste0(n)]] <- res
}
return(list(point_estimates = point_estimates,
confidence_intervals = confidence_intervals))
}
get_results(cdf_results)
